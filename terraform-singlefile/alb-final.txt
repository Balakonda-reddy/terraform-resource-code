alb-sg
==========
resource "aws_security_group" "alb-sg1" {
  name        = "alb-sg1"
  description = "Allow TLS inbound traffic"
  vpc_id      = "vpc-379d4d5c"

  ingress {
    description      = "TLS from VPC"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  tags = {
    Name = "alb-sg1"
  }
}


ec2-sg
========

resource "aws_security_group" "ec2-sg1" {
  name        = "ec2-sg1"
  description = "Allow TLS inbound traffic"
  vpc_id      = "vpc-379d4d5c"

 ingress {
    description      = "TLS from VPC"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["103.110.170.86/32"]
  }

 ingress {
    description      = "TLS from VPC"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    security_groups = [aws_security_group.alb-sg1.id]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  tags = {
    Name = "ec2-sg1"
  }
}


ec2
==========


# for key pair purpose

resource "aws_key_pair" "key" {
  key_name   = "k1"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDeAIhH1gFXTS/wpPyx0gpfjEqjMLEa1nGCnGq0odQoU7Bj0Smn9zrGv/p20gaWZ6sQIP5NlhT58B92PvVMhncXs0gGkfST6EJOtbZHxBSwcPrqOuO2pRHujA9ZB8kgjwWJEiRHuESgi85ef87zzudv52NaRRfzlIffC39Gl7zDvChroydjXm5WHiGY2klzIohdXVJck5hD/mXMb97fktwD9UEqhrbRd501MHJHnL/ubr6AXBznDOa+2DniIyD8xTu1/j1qvFA5JkoS/N3IEd8BCwe1xFPlULW7Aaibk1w25AopmpLcp4E/ykYw5FbYm/6Or5+r2hAWuHu6Kx5e0tgiOTqnI65SiWuPWRvlaHQuwAAtACjjier9KG01FrC/jZkRrfdtlFHlIY4nvEWGfJRlqcwxhX6dtdMRUQ/QZqV/o2Ukn9RQObPmvVahGkQmgmDIYCWZr4AFtmUzLwu2efaAWS9SWf96mMFRraG6MmEwk2hOApJOtCkQ1YkZVsAcq5s= china@BALU"
}

# for instance purpose

# FOR EC2 1

resource "aws_instance" "instance" {
    ami = "ami-052cef05d01020f1d"
    instance_type = "t2.micro"
    key_name = "k1"
    vpc_security_group_ids = [aws_security_group.ec2-sg1.id]
    user_data = <<EOF

    #!/bin/bash
    yum update -y
    yum install httpd -y 
    systemctl enable httpd
    systemctl start httpd
    mkdir -p  /var/www/html/chess/
    echo "this is chess" >/var/www/html/chess/index.html

    EOF 

    tags = {
        Name = "i1"
    }
}

# FOR EC2 2

resource "aws_instance" "instance1" {
    ami = "ami-052cef05d01020f1d"
    instance_type = "t2.micro"
    key_name = "k1"
    vpc_security_group_ids = [aws_security_group.ec2-sg1.id]
    user_data = <<EOF

    #!/bin/bash
    yum update -y
    yum install httpd -y 
    systemctl enable httpd
    systemctl start httpd
    mkdir -p  /var/www/html/sudoku/
    echo "this is sudoku" >/var/www/html/sudoku/index.html

    EOF 

    tags = {
        Name = "i2"
    }
}


alb
======


# for alb

resource "aws_lb" "alb-11" {
  name               = "alb-11"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.alb-sg1.id]
  subnets            = ["subnet-76718f1d","subnet-32e5ca7e"]

  # enable_deletion_protection = true

  tags = {
    Name = "alb-11"
  }
}

# for default listener

resource "aws_lb_listener" "l-1" {
  load_balancer_arn = aws_lb.alb-11.arn
  port              = "80"
  protocol          = "HTTP"
  # ssl_policy        = "ELBSecurityPolicy-2016-08"
  # certificate_arn   = "arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.alb-tg1.arn
  }
}


# for listener rule 1

resource "aws_lb_listener_rule" "lr1" {
  listener_arn = aws_lb_listener.l-1.arn
  # priority     = 100

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.alb-tg1.arn
  }

  condition {
    path_pattern {
      values = ["/chess/*"]
    }
  }
}

# for listener rule 2

resource "aws_lb_listener_rule" "lr2" {
  listener_arn = aws_lb_listener.l-1.arn
  # priority     = 100

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.alb-tg2.arn
  }


  condition {
    path_pattern {
      values = ["/sudoku/*"]
    }
  }
}


alb-target
===========


# for target group 1

resource "aws_lb_target_group" "alb-tg1" {
  name     = "alb-tg1"
  port     = 80
  protocol = "HTTP"
  vpc_id   = "vpc-379d4d5c"
}

# for target group 2
resource "aws_lb_target_group" "alb-tg2" {
  name     = "alb-tg2"
  port     = 80
  protocol = "HTTP"
  vpc_id   = "vpc-379d4d5c"
}


resource "aws_lb_target_group_attachment" "attach-1" {
  target_group_arn = aws_lb_target_group.alb-tg1.arn
  target_id        = aws_instance.instance.id
  port             = 80
}

resource "aws_lb_target_group_attachment" "attach-2" {
  target_group_arn = aws_lb_target_group.alb-tg2.arn
  target_id        = aws_instance.instance1.id
  port             = 80
}


